"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcConnection = void 0;
const grpc_web_1 = require("@improbable-eng/grpc-web");
const context_1 = require("@textile/context");
const grpc_transport_1 = require("@textile/grpc-transport");
class GrpcConnection {
    /**
     * Creates a new gRPC client instance for accessing the Textile Buckets API.
     * @param context The context to use for interacting with the APIs. Can be modified later.
     */
    constructor(context = new context_1.Context(), debug = false) {
        this.context = context;
        const transport = grpc_transport_1.WebsocketTransport(); // Default to websocket always
        this.serviceHost = context.host;
        this.rpcOptions = {
            transport,
            debug,
        };
        // Set default transport to websocket "globally"
        grpc_web_1.grpc.setDefaultTransport(transport);
    }
    unary(methodDescriptor, req, ctx) {
        return __awaiter(this, void 0, void 0, function* () {
            const context = new context_1.Context().withContext(this.context).withContext(ctx);
            const metadata = yield context.toMetadata();
            return new Promise((resolve, reject) => {
                grpc_web_1.grpc.unary(methodDescriptor, {
                    request: req,
                    host: this.serviceHost,
                    transport: this.rpcOptions.transport,
                    debug: this.rpcOptions.debug,
                    metadata,
                    onEnd: (res) => {
                        const { status, statusMessage, message } = res;
                        if (status === grpc_web_1.grpc.Code.OK) {
                            resolve(message);
                        }
                        else {
                            const err = {
                                message: statusMessage,
                                code: status,
                                metadata,
                            };
                            reject(err);
                        }
                    },
                });
            });
        });
    }
}
exports.GrpcConnection = GrpcConnection;
//# sourceMappingURL=index.js.map