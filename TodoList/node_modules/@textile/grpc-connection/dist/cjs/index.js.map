{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,uDAA+C;AAC/C,8CAA4D;AAC5D,4DAA4D;AAQ5D,MAAa,cAAc;IAGzB;;;OAGG;IACH,YAAmB,UAA4B,IAAI,iBAAO,EAAE,EAAE,KAAK,GAAG,KAAK;QAAxD,YAAO,GAAP,OAAO,CAAkC;QAC1D,MAAM,SAAS,GAAG,mCAAkB,EAAE,CAAA,CAAC,8BAA8B;QACrE,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,IAAI,CAAA;QAC/B,IAAI,CAAC,UAAU,GAAG;YAChB,SAAS;YACT,KAAK;SACN,CAAA;QACD,gDAAgD;QAChD,eAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAA;IACrC,CAAC;IAEY,KAAK,CAIhB,gBAAmB,EAAE,GAAM,EAAE,GAAsB;;YACnD,MAAM,OAAO,GAAG,IAAI,iBAAO,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAA;YACxE,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,UAAU,EAAE,CAAA;YAC3C,OAAO,IAAI,OAAO,CAAI,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACxC,eAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE;oBAC3B,OAAO,EAAE,GAAG;oBACZ,IAAI,EAAE,IAAI,CAAC,WAAW;oBACtB,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS;oBACpC,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK;oBAC5B,QAAQ;oBACR,KAAK,EAAE,CAAC,GAAwB,EAAE,EAAE;wBAClC,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,OAAO,EAAE,GAAG,GAAG,CAAA;wBAC9C,IAAI,MAAM,KAAK,eAAI,CAAC,IAAI,CAAC,EAAE,EAAE;4BAC3B,OAAO,CAAC,OAAc,CAAC,CAAA;yBACxB;6BAAM;4BACL,MAAM,GAAG,GAAiB;gCACxB,OAAO,EAAE,aAAa;gCACtB,IAAI,EAAE,MAAM;gCACZ,QAAQ;6BACT,CAAA;4BACD,MAAM,CAAC,GAAG,CAAC,CAAA;yBACZ;oBACH,CAAC;iBACF,CAAC,CAAA;YACJ,CAAC,CAAC,CAAA;QACJ,CAAC;KAAA;CACF;AAhDD,wCAgDC","sourcesContent":["import { grpc } from '@improbable-eng/grpc-web'\nimport { Context, ContextInterface } from '@textile/context'\nimport { WebsocketTransport } from '@textile/grpc-transport'\n\nexport interface ServiceError {\n  message: string\n  code: number\n  metadata: grpc.Metadata\n}\n\nexport class GrpcConnection {\n  public serviceHost: string\n  public rpcOptions: grpc.RpcOptions\n  /**\n   * Creates a new gRPC client instance for accessing the Textile Buckets API.\n   * @param context The context to use for interacting with the APIs. Can be modified later.\n   */\n  constructor(public context: ContextInterface = new Context(), debug = false) {\n    const transport = WebsocketTransport() // Default to websocket always\n    this.serviceHost = context.host\n    this.rpcOptions = {\n      transport,\n      debug,\n    }\n    // Set default transport to websocket \"globally\"\n    grpc.setDefaultTransport(transport)\n  }\n\n  public async unary<\n    R extends grpc.ProtobufMessage,\n    T extends grpc.ProtobufMessage,\n    M extends grpc.UnaryMethodDefinition<R, T>\n  >(methodDescriptor: M, req: R, ctx?: ContextInterface): Promise<T> {\n    const context = new Context().withContext(this.context).withContext(ctx)\n    const metadata = await context.toMetadata()\n    return new Promise<T>((resolve, reject) => {\n      grpc.unary(methodDescriptor, {\n        request: req,\n        host: this.serviceHost,\n        transport: this.rpcOptions.transport,\n        debug: this.rpcOptions.debug,\n        metadata,\n        onEnd: (res: grpc.UnaryOutput<T>) => {\n          const { status, statusMessage, message } = res\n          if (status === grpc.Code.OK) {\n            resolve(message as any)\n          } else {\n            const err: ServiceError = {\n              message: statusMessage,\n              code: status,\n              metadata,\n            }\n            reject(err)\n          }\n        },\n      })\n    })\n  }\n}\n"]}